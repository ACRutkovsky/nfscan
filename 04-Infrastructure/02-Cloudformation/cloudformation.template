{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create the required network layer for nfscan project",
  "Mappings": {
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "WebTierSubnet1": {
        "CIDR": "10.0.0.0/24"
      },
      "WebTierSubnet2": {
        "CIDR": "10.0.1.0/24"
      },
      "WorkerTierSubnet1": {
        "CIDR": "10.0.2.0/24"
      },
      "WorkerTierSubnet2": {
        "CIDR": "10.0.3.0/24"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "nfscan"
          }
        ]
      }
    },
    "WebTierSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "WebTierSubnet1",
            "CIDR"
          ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web-tier :: Public Subnet 1"
          }
        ]
      }
    },
    "WebTierSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "WebTierSubnet2",
            "CIDR"
          ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web-tier :: Public Subnet 2"
          }
        ]
      }
    },
    "WorkerTierSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "WorkerTierSubnet1",
            "CIDR"
          ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Worker-tier :: Public Subnet 1"
          }
        ]
      }
    },
    "WorkerTierSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "WorkerTierSubnet2",
            "CIDR"
          ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Worker-tier :: Public Subnet 2"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "nfscan"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "nfscan"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "WebTierSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WebTierSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "WebTierSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WebTierSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "WorkerTierSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WorkerTierSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "WorkerTierSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WorkerTierSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "WebTierSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Web-tier Security Group with HTTP access on port 8080 from the ELB",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "PublicLoadBalancerSecurityGroup" }
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "WorkerTierSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Worker-tier Security Group with no access to the other instances",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [],
        "SecurityGroupEgress": []
      }
    },
    "S3TaxReceiptsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "nfscan"
          }
        ]
      }
    },
    "SQSOcrProcessIn":{
        "Type" : "AWS::SQS::Queue",
        "Properties" : {
          "DelaySeconds": 0,
          "MaximumMessageSize": 262144,
          "MessageRetentionPeriod": 345600,
          "QueueName": "PROD-NFSCAN-OCR-PROCESS-IN",
          "ReceiveMessageWaitTimeSeconds": 0,
          "VisibilityTimeout": 30
        }
    },
    "SQSOcrProcessOut":{
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "DelaySeconds": 0,
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 345600,
        "QueueName": "PROD-NFSCAN-OCR-PROCESS-OUT",
        "ReceiveMessageWaitTimeSeconds": 0,
        "VisibilityTimeout": 30
      }
    },
    "DynamoDBOcrTransaction":{
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "transaction_id",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "transaction_id",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "1",
          "WriteCapacityUnits" : "1"
        },
        "TableName" : "PROD-NFSCAN-OCRTRANSACTION"
      }
    },
    "DynamoDBTaxReceipt":{
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "taxreceipt_id",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "taxreceipt_id",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "1",
          "WriteCapacityUnits" : "1"
        },
        "TableName" : "PROD-NFSCAN-TAXRECEIPT"
      }
    },
    "DynamoDBTaxReceiptArchive":{
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "taxreceiptarchive_id",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "taxreceiptarchive_id",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "1",
          "WriteCapacityUnits" : "1"
        },
        "TableName" : "PROD-NFSCAN-TAXRECEIPTARCHIVE"
      }
    },
    "NfScanRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "nfscan_policy",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket"
                ],
                "Resource": [
                  {
                    "Fn::Sub" : "arn:aws:s3:::${S3TaxReceiptsBucket}"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject",
                  "s3:PutObjectAcl"
                ],
                "Resource": [
                  {
                    "Fn::Sub" : "arn:aws:s3:::${S3TaxReceiptsBucket}/*"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sqs:DeleteMessage",
                  "sqs:GetQueueAttributes",
                  "sqs:GetQueueUrl",
                  "sqs:ReceiveMessage",
                  "sqs:SendMessage"
                ],
                "Resource": [
                  {
                    "Fn::Sub" : "${SQSOcrProcessIn.Arn}"
                  },
                  {
                    "Fn::Sub" : "${SQSOcrProcessOut.Arn}"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem",
                  "dynamodb:DescribeTable"
                ],
                "Resource": [
                  {
                    "Fn::Sub" : "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBOcrTransaction}"
                  },
                  {
                    "Fn::Sub" : "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTaxReceipt}"
                  },
                  {
                    "Fn::Sub" : "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTaxReceiptArchive}"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudwatch:PutMetricData"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        } ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "NfScanRole"
        } ]
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref": "WebTierSubnet1" },{ "Ref": "WebTierSubnet2" }],
        "CrossZone" : true,
        "SecurityGroups": [{ "Ref": "PublicLoadBalancerSecurityGroup" }],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "8080",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:8080/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    }
  },
  "Outputs" : {
    "BackendUrl" : {
      "Description" : "Backend url that you'll use in the mobile app",
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}
    }
  }
}